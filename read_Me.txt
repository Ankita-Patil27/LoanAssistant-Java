LoanAssistant.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LoanAssistant;

import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ap415
 */
public class LoanAssistant extends javax.swing.JFrame {

    Color lightYellow = new Color(255, 255, 128);
    boolean computePayment;
    public LoanAssistant() {
        initComponents();
    }
    public boolean validateDecimalNumber(JTextField tf){
        String s = tf.getText().trim();
        boolean hasDecimal = false;
        boolean valid = true;
        if (s.length() == 0){
        valid = false;
        }else{
        for (int i = 0; i < s.length(); i++){
        char c = s.charAt(i);
        if (c >= '0' && c <= '9'){
        continue;
        }
        else if (c == '.' && !hasDecimal){
        hasDecimal = true;
        }
        else{
        valid = false;
        }}}
        tf.setText(s);
        if (!valid){
        tf.requestFocus();
        }
        return (valid);
        }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        balanceLabel = new javax.swing.JLabel();
        interestLabel = new javax.swing.JLabel();
        monthsLabel = new javax.swing.JLabel();
        paymentLabel = new javax.swing.JLabel();
        balanceTextField = new javax.swing.JTextField();
        interestTextField = new javax.swing.JTextField();
        monthsTextField = new javax.swing.JTextField();
        paymentTextField = new javax.swing.JTextField();
        monthsButton = new javax.swing.JButton();
        paymentButton = new javax.swing.JButton();
        computeButton = new javax.swing.JButton();
        analysisLabel = new javax.swing.JLabel();
        newLoanButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        analysisTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Loan Assistant");
        setResizable(false);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        balanceLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        balanceLabel.setText("Loan Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(balanceLabel, gridBagConstraints);

        interestLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        interestLabel.setText("Interest Rate ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(interestLabel, gridBagConstraints);

        monthsLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        monthsLabel.setText("Number Of Payments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(monthsLabel, gridBagConstraints);

        paymentLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        paymentLabel.setText("Monthly Payment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(paymentLabel, gridBagConstraints);

        balanceTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        balanceTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        balanceTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        balanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(balanceTextField, gridBagConstraints);

        interestTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        interestTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        interestTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        interestTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interestTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(interestTextField, gridBagConstraints);

        monthsTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        monthsTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        monthsTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        monthsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(monthsTextField, gridBagConstraints);

        paymentTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        paymentTextField.setMinimumSize(new java.awt.Dimension(100, 25));
        paymentTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        paymentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(paymentTextField, gridBagConstraints);

        monthsButton.setText("X");
        monthsButton.setFocusable(false);
        monthsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(monthsButton, gridBagConstraints);

        paymentButton.setText("X");
        paymentButton.setFocusable(false);
        paymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(paymentButton, gridBagConstraints);

        computeButton.setText("Compute Monthly Payments");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(computeButton, gridBagConstraints);

        analysisLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        analysisLabel.setText("Loan Analysis:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(analysisLabel, gridBagConstraints);

        newLoanButton.setText("New Loan Analysis");
        newLoanButton.setEnabled(false);
        newLoanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLoanButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(newLoanButton, gridBagConstraints);

        exitButton.setText("Exit");
        exitButton.setFocusable(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        getContentPane().add(exitButton, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 150));

        analysisTextArea.setEditable(false);
        analysisTextArea.setColumns(20);
        analysisTextArea.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        analysisTextArea.setRows(5);
        analysisTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        analysisTextArea.setFocusable(false);
        jScrollPane1.setViewportView(analysisTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
    }// </editor-fold>                        

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        double balance, interest, payment;
        int months;
        double monthlyInterest, multiplier;
        double loanBalance, finalPayment;
        if (validateDecimalNumber(balanceTextField))
        {
        balance =Double.valueOf(balanceTextField.getText());
        }
        else
        {
        JOptionPane.showConfirmDialog(null, "Invalid or empty Loan Balance entry.\nPlease correct.", "Balance Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        if (validateDecimalNumber(interestTextField))
        {
        interest =Double.valueOf(interestTextField.getText());
        }
        else
        {
        JOptionPane.showConfirmDialog(null, "Invalid or empty Interest Rate entry.\nPlease correct.", "Interest Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        monthlyInterest = interest / 1200;
        if (computePayment)
        {
        if (validateDecimalNumber(monthsTextField))
        {
        months =Integer.valueOf(monthsTextField.getText());
        }
        else
        {
        JOptionPane.showConfirmDialog(null, "Invalid or empty Number of Payments entry.\nPlease correct.", "Number of Payments Input Error",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        if (interest == 0)
        {
        payment = balance / months;
        }
        else
        {
        multiplier = Math.pow(1 + monthlyInterest, months);
        payment = balance * monthlyInterest * multiplier / (multiplier - 1);
        }
        paymentTextField.setText(new DecimalFormat("0.00").format(payment));
        }
        else
        {
        // Compute number of payments
        if (validateDecimalNumber(paymentTextField))
        {
        payment =Double.valueOf(paymentTextField.getText());
        if (payment <= (balance * monthlyInterest + 1.0))
        {
        if (JOptionPane.showConfirmDialog(null, "Minimum payment must be $" +new DecimalFormat("0.00").format((int)(balance * monthlyInterest + 1.0)) + "\n" + "Do you want to use the minimum payment?", "Input Error", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)
        {
        paymentTextField.setText(new DecimalFormat("0.00").format((int)(balance *
        monthlyInterest + 1.0)));
        payment =
        Double.valueOf(paymentTextField.getText());
        }
        else
        {
        paymentTextField.requestFocus();
        return;
        }
        }
        }
        else
        {
        JOptionPane.showConfirmDialog(null, "Invalid or empty Monthly Payment entry.\nPlease correct.", "Payment Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
        }
        if (interest == 0)
        {
        months = (int)(balance / payment);
        }
        else
        {
        months = (int)((Math.log(payment) - Math.log(payment - balance * monthlyInterest)) /
        Math.log(1 + monthlyInterest));
        }
        monthsTextField.setText(String.valueOf(months));
        }
        payment =Double.valueOf(paymentTextField.getText());
        analysisTextArea.setText("Loan Balance: $" + new DecimalFormat("0.00").format(balance));
        analysisTextArea.append("\n" + "Interest Rate: " + new DecimalFormat("0.00").format(interest) + "%");
        // process all but last payment
        loanBalance = balance;
        for (int paymentNumber = 1; paymentNumber <= months - 1; paymentNumber++)
        {
        loanBalance += loanBalance * monthlyInterest - payment;
        }
        // find final payment
        finalPayment = loanBalance;
        if (finalPayment > payment)
        {
        // apply one more payment
        loanBalance += loanBalance * monthlyInterest - payment;
        finalPayment = loanBalance;
        months++;
        monthsTextField.setText(String.valueOf(months));
        }
        analysisTextArea.append("\n\n" + String.valueOf(months - 1) + " Payments of $" + new
        DecimalFormat("0.00").format(payment));
        analysisTextArea.append("\n" + "Final Payment of: $" + new
        DecimalFormat("0.00").format(finalPayment));
        analysisTextArea.append("\n" + "Total Payments: $" + new
        DecimalFormat("0.00").format((months - 1) * payment + finalPayment));
        analysisTextArea.append("\n" + "Interest Paid $" + new
        DecimalFormat("0.00").format((months - 1) * payment + finalPayment - balance));
        computeButton.setEnabled(false);
        newLoanButton.setEnabled(true);
        newLoanButton.requestFocus();
    }                                             

    private void newLoanButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if (computePayment){
        paymentTextField.setText("");
        }else{
        monthsTextField.setText("");
        }
        analysisTextArea.setText("");
        computeButton.setEnabled(true);
        newLoanButton.setEnabled(false);
        balanceTextField.requestFocus();
    }                                             

    private void monthsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        computePayment = false;
        paymentButton.setVisible(true);
        monthsButton.setVisible(false);
        monthsTextField.setText("");
        monthsTextField.setEditable(false);
        monthsTextField.setBackground(lightYellow);
        monthsTextField.setFocusable(false);
        paymentTextField.setEditable(true);
        paymentTextField.setBackground(Color.WHITE);
        paymentTextField.setFocusable(true);
        computeButton.setText("Compute Number of Payments");
        balanceTextField.requestFocus();

    }                                            

    private void paymentButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        computePayment = true;
        paymentButton.setVisible(false);
        monthsButton.setVisible(true);
        monthsTextField.setEditable(true);
        monthsTextField.setBackground(Color.WHITE);
        monthsTextField.setFocusable(true);
        paymentTextField.setText("");
        paymentTextField.setEditable(false);
        paymentTextField.setBackground(lightYellow);
        paymentTextField.setFocusable(false);
        computeButton.setText("Compute Monthly Payment");
        balanceTextField.requestFocus();
    }                                             

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          

    private void balanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        balanceTextField.transferFocus();
    }                                                

    private void interestTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        interestTextField.transferFocus();
    }                                                 

    private void monthsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                
        monthsTextField.transferFocus();
    }                                               

    private void paymentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        paymentTextField.transferFocus();
    }                                                

    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanAssistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoanAssistant().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel analysisLabel;
    private javax.swing.JTextArea analysisTextArea;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel interestLabel;
    private javax.swing.JTextField interestTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton monthsButton;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JTextField monthsTextField;
    private javax.swing.JButton newLoanButton;
    private javax.swing.JButton paymentButton;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JTextField paymentTextField;
    // End of variables declaration                   
}
